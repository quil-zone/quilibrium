---
name: publish
on:
  push:
    tags:
      - '*'
jobs:
  create-release:
    name: create release
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      -
        name: create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ github.ref_name }}
          draft: false
          prerelease: true
          generate_release_notes: false
  artifact-build:
    name: artifact build
    needs: create-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-latest
          - ubuntu-latest
        arch:
          - amd64
          - arm64
        include:
          -
            os: macos-latest
            goos: darwin
            extldflags: -L${GITHUB_WORKSPACE}/target/release -lvdf -lbls48581 -ldl -lm
            rustflags: -L /opt/homebrew/Cellar/gmp/6.3.0/lib
          -
            os: ubuntu-latest
            goos: linux
            extldflags: -L${GITHUB_WORKSPACE}/target/release -Wl,-Bstatic -lvdf -lbls48581 -Wl,-Bdynamic -ldl -lm
            rustflags: -L /usr/lib/x86_64-linux-gnu
        exclude:
          -
            os: macos-latest
            arch: amd64
          -
            os: ubuntu-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    env:
      CARGO_TERM_COLOR: always
    steps:
      -
        name: source fetch
        uses: actions/checkout@v4
      -
        name: read version
        run: |
          echo "GIT_TAG=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "SHORT_GIT_SHA=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
          echo "QUILIBRIUM_VERSION=$(cat ${GITHUB_WORKSPACE}/node/config/version.go | grep -A 1 'func GetVersion() \[\]byte {' | grep -Eo '0x[0-9a-fA-F]+' | xargs printf '%d.%d.%d')" >> $GITHUB_ENV
      -
        name: verify tag and version match
        run: |
          if [ "${GIT_TAG}" = "v${QUILIBRIUM_VERSION}-${SHORT_GIT_SHA}" ]; then
            echo "git tag: ${GIT_TAG}"
            echo "short git sha: ${SHORT_GIT_SHA}"
            echo "quilibrium version: ${QUILIBRIUM_VERSION}"
          else
            echo "version in node/config/version.go (${QUILIBRIUM_VERSION}) does not match tag (${GIT_TAG})"
            echo "::error file={name},line={line},endLine={endLine},title={title}::{message}"
            exit 1
          fi
      #-
      #  name: linux arm64 cross compiler setup
      #  if: (matrix.os == 'ubuntu-latest' && matrix.arch == 'arm64')
      #  run: |
      #    sudo apt-get install -y \
      #      clang \
      #      gcc-aarch64-linux-gnu \
      #      musl-tools \
      #      llvm
      #    rustup target add aarch64-unknown-linux-musl
      #    echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      #    echo "CC_FOR_TARGET=gcc-aarch64-linux-gnu" >> $GITHUB_ENV
      #    echo "CC_aarch64_unknown_linux_musl=aarch64-linux-musl-gcc" >> $GITHUB_ENV
      #    echo "AR_aarch64_unknown_linux_musl=aarch64-linux-musl-ar" >> $GITHUB_ENV
      #    echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
      #    echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_RUSTFLAGS='-Clink-self-contained=yes -Clinker=rust-lld'" >> $GITHUB_ENV
      -
        name: go setup
        uses: actions/setup-go@v5
        with:
          go-version: '1.21.x'
      -
        name: dependency setup
        run: |
          go install github.com/fullstorydev/grpcurl/cmd/grpcurl@v1.9.1
          cargo install \
            uniffi-bindgen-go \
            --git https://github.com/NordSecurity/uniffi-bindgen-go \
            --tag v0.2.1+v0.25.0
      -
        name: rust builds
        env:
          RUSTFLAGS: ${{ matrix.rustflags }}
        run: |
          for crate in bls48581 vdf; do
            cargo build --package ${crate} --release
            pushd ${GITHUB_WORKSPACE}/crates/${crate}
            uniffi-bindgen-go ${GITHUB_WORKSPACE}/crates/${crate}/src/lib.udl -o ${GITHUB_WORKSPACE}/${crate}/generated
          done
      -
        name: node build
        env:
          CGO_ENABLED: 1
          GOARCH: ${{ matrix.arch }}
          GOOS: ${{ matrix.goos }}
        run: |
          pushd ${GITHUB_WORKSPACE}/node
          go build -ldflags "-linkmode 'external' -extldflags '${{ matrix.extldflags }}'" -o ${GITHUB_WORKSPACE}/quilibrium-${GIT_TAG}-${{ matrix.goos }}-${{ matrix.arch }}
      -
        name: create digests
        run: |
          pushd ${GITHUB_WORKSPACE}
          ls -ahl ${GITHUB_WORKSPACE}
          openssl sha3-256 -out ${GITHUB_WORKSPACE}/quilibrium-${GIT_TAG}-${{ matrix.goos }}-${{ matrix.arch }}.dgst ${GITHUB_WORKSPACE}/quilibrium-${GIT_TAG}-${{ matrix.goos }}-${{ matrix.arch }}
          ls -ahl ${GITHUB_WORKSPACE}
      -
        name: publish
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create_release.outputs.tag-name }}
          files: |
            ${{ github.workspace }}/quilibrium-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.arch }}
            ${{ github.workspace }}/quilibrium-${{ github.ref_name }}-${{ matrix.goos }}-${{ matrix.arch }}.dgst
